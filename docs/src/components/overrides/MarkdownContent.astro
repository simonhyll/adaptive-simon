---
import { createMarkdownProcessor } from "@astrojs/markdown-remark";
import Default from "@astrojs/starlight/components/MarkdownContent.astro";
import BlogContent from 'starlight-blog/overrides/MarkdownContent.astro'
import type { Props } from "@astrojs/starlight/props";
import SimonSays from "@components/SimonSays.astro";
import { getEntry } from "astro:content";
const slug = Astro.params.slug ? Astro.params.slug : "index"
let page = (await getEntry(
  "docs",
  slug
)) as any;
if (!page) {
    page = (await getEntry(
    "docs",
    // @ts-ignore
    Astro.params.slug.slice(3)
  )) as any;
}
const summary = page.data.summary
  ? page.data.summary.split("\n\n").filter((line: string) => line !== "")
  : [];
let references =
  page.data.references?.map(async (ref: string) => {
    if (!ref.startsWith("/")) {
      return {
        href: ref,
        title: ref,
        description: "",
      };
    }
    const refPage = await getEntry("docs", ref);
    return {
      href: "/" + ref,
      title: refPage?.data.title,
      description: refPage?.data.description,
    };
  }) ?? null;
const isLandingPage = !Astro.params.slug || ['sv'].includes(Astro.params.slug);
if (references) references = await Promise.all(references);
const procesor = await createMarkdownProcessor();
const content = await procesor.render(summary.join("\n\n"));
const isBlog = slug.split("/")[0] === "blog" || slug.slice(3).split("/")[0] === "blog";
---

{!isBlog ?
<Default {...Astro.props}>
  {
    !isLandingPage ? (
      <SimonSays title={page.data.description}>
        <Fragment set:html={content.code} />
      </SimonSays>
    ) : (
      ""
    )
  }
  <slot />
  {
    references ? (
      <>
        <h2>References</h2>
        <ul>
          {references.map((reference: any) => (
            <li>
              <a href={reference.href}>{reference.title}</a>
              {": " + reference.description}
            </li>
          ))}
        </ul>
      </>
    ) : null
  }
</Default>
: <BlogContent {...Astro.props}>
  <slot />
</BlogContent>}
