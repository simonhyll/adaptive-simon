{
  "files": [
    {
      "path": [
        "/",
        "home",
        "simon",
        "projects",
        "simonhyll",
        "simonhyll",
        "crates",
        "simonhyll-cli",
        "src",
        "lib.rs"
      ],
      "content": "pub fn add(left: usize, right: usize) -> usize {\n  left + right\n}\n\n#[cfg(test)]\nmod tests {\n  use super::*;\n\n  #[test]\n  fn it_works() {\n    let result = add(2, 2);\n    assert_eq!(result, 4);\n  }\n}\n",
      "traces": [
        {
          "line": 1,
          "address": [123344, 123345, 123264],
          "length": 1,
          "stats": { "Line": 3 },
          "fn_name": "add"
        },
        {
          "line": 2,
          "address": [123301, 123278],
          "length": 1,
          "stats": { "Line": 1 },
          "fn_name": null
        }
      ],
      "covered": 2,
      "coverable": 2
    },
    {
      "path": [
        "/",
        "home",
        "simon",
        "projects",
        "simonhyll",
        "simonhyll",
        "docs",
        "src-tauri",
        "build.rs"
      ],
      "content": "fn main() {\n  tauri_build::build()\n}\n",
      "traces": [],
      "covered": 0,
      "coverable": 0
    },
    {
      "path": [
        "/",
        "home",
        "simon",
        "projects",
        "simonhyll",
        "simonhyll",
        "docs",
        "src-tauri",
        "src",
        "lib.rs"
      ],
      "content": "#[cfg_attr(mobile, tauri::mobile_entry_point)]\npub fn run() {\n  tauri::Builder::default()\n    .run(tauri::generate_context!())\n    .expect(\"error while running tauri application\");\n}\n",
      "traces": [],
      "covered": 0,
      "coverable": 0
    },
    {
      "path": [
        "/",
        "home",
        "simon",
        "projects",
        "simonhyll",
        "simonhyll",
        "docs",
        "src-tauri",
        "src",
        "main.rs"
      ],
      "content": "// Prevents additional console window on Windows in release, DO NOT REMOVE!!\n#![cfg_attr(not(debug_assertions), windows_subsystem = \"windows\")]\n\nfn main() {\n  app_lib::run();\n}\n",
      "traces": [],
      "covered": 0,
      "coverable": 0
    },
    {
      "path": [
        "/",
        "home",
        "simon",
        "projects",
        "simonhyll",
        "simonhyll",
        "packages",
        "create-simon",
        "build.rs"
      ],
      "content": "extern crate napi_build;\n\nfn main() {\n  napi_build::setup();\n}\n",
      "traces": [],
      "covered": 0,
      "coverable": 0
    },
    {
      "path": [
        "/",
        "home",
        "simon",
        "projects",
        "simonhyll",
        "simonhyll",
        "packages",
        "create-simon",
        "src",
        "lib.rs"
      ],
      "content": "#![deny(clippy::all)]\n\n#[macro_use]\nextern crate napi_derive;\n\n#[napi]\npub fn sum(a: i32, b: i32) -> i32 {\n  a + b\n}\n\n#[napi]\npub fn run() {\n  println!(\"Hello!\");\n}\n",
      "traces": [],
      "covered": 0,
      "coverable": 0
    }
  ],
  "coverage": 100.0,
  "covered": 2,
  "coverable": 2
}
