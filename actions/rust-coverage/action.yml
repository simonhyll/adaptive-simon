name: RustCoverage
description: Check for coverage and report the status as a comment on the PR
inputs:
  dashboard:
    description: Whether a dashboard should be created
    required: true
    default: 'false'
  comment:
    description: Whether a comment should be created
    required: true
    default: 'true'
runs:
  using: 'composite'
  steps:
    - uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-tarpaulin
      shell: bash
      run: cargo install cargo-tarpaulin --locked

    - name: Run tests with coverage
      id: coverage
      shell: bash
      run: cargo tarpaulin --out Xml -p simonhyll-cli

    - name: Parse coverage results
      id: parse_coverage
      shell: bash
      run: |
        coverage=$(grep -o 'line-rate="[^"]*"' tarpaulin-report.xml | sed 's/line-rate="//' | sed 's/"//')
        echo "COVERAGE=$coverage" >> $GITHUB_ENV

    - name: Set code coverage status
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = process.env.COVERAGE;
          const commentBody = `# Code Coverage
          |File|Coverage|Lines|
          |:--|:--|:--|
          |[crates/file/one.rs](https://github.com)|${coverage}|15|
          # Audit
          |Dependency|Level|
          |:--|:--|
          |tokio|Critical|`;

          async function findExistingComment() {
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            // Look for a comment that starts with the first line of our comment body
            return comments.find(comment => comment.body.startsWith('# Code Coverage') && comment.user.type === 'Bot');
          }

          async function createOrUpdateComment() {
            const existingComment = await findExistingComment();

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
          }

          createOrUpdateComment().catch(error => {
            console.error(error);
            process.exit(1);
          });
