name: RustCoverage
description: Check for coverage and report the status as a comment on the PR
inputs:
  dashboard:
    description: Whether a dashboard should be created
    required: true
    default: 'false'
  comment:
    description: Whether a comment should be created
    required: true
    default: 'true'
outputs:
  page_url:
    description: 'URL to deployed GitHub Pages'
runs:
  using: 'composite'
  steps:
    - name: Hello World
      run: |
        echo "::notice::Deployment successful! [Check it out here](https://your-link-here.com)"

        # Set output variable
        echo "::set-output name=page_url::https://simon.hyll.nu/"

      shell: bash

    - name: Set code coverage status
      uses: actions/github-script@v7
      with:
        script: |

          const commentBody = "Your dashboard or comment content here";

          async function findExistingComment() {
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            return comments.find(comment => comment.user.login === context.actor);
          }

          async function createOrUpdateComment() {
            const existingComment = await findExistingComment();

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
          }

          createOrUpdateComment().catch(error => {
            console.error(error);
            process.exit(1);
          });
